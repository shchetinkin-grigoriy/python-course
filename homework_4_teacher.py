# Task 1
'''Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной
платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в
час) + премия. Для выполнения расчета для конкретных значений необходимо запускать
скрипт с параметрами.
'''

import sys

hours, salary_per_our, bonus = map(float, sys.argv[1:])
print('Salary - {}'.format(hours * salary_per_our + bonus))

# Task 2
'''Представлен список чисел. Необходимо вывести элементы исходного списка, значения
которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для
формирования списка использовать генератор'''

my_list = [1, 9, 1, 72, 3, 4, 5, 6, 3]
new_list = [num for i, num in enumerate(my_list) if my_list[i] > my_list[i - 1] and i != 0]
print(new_list)

# Task 3
'''Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить
задание в одну строку.
одсказка: использовать функцию range() и генератор'''

print([x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0])

# Task 4
'''Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в
порядке их следования в исходном списке. Для выполнения задания обязательно
использовать генератор.
'''

my_list = [1, 1, 2, 2, 3, 4, 5, 6, 8, 3, 1, 4, 10, 11, 1]
new_list = [x for x in my_list if my_list.count(x) == 1]

# Task 5
'''Реализовать формирование списка, используя функцию range() и возможности генератора. В
список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить
результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''
from functools import reduce


def mul_list(n1, n2):
    return n1 * n2


my_list = [x for x in range(100, 1001) if x % 2 == 0]
reduce(mul_list, my_list)

# Task 6
'''
Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools'''
# a
from itertools import count, cycle

for i in count(int(input('Введите стартовое число: '))):
    print(i)

# b
my_list = [1, 1, 2, 2, 3, 4, 5, 6, 8, 3, 1, 4, 10, 11, 1]

iter = cycle(my_list)
stop = ''
while stop != 'q':
    print(next(iter), end='')
    stop = input()

# Task 7
'''
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное
значение. При вызове функции должен создаваться объект-генератор. Функция должна
вызываться следующим образом: for el in fibo_gen(). Функция отвечает за получение
факториала числа, а в цикле необходимо выводить только первые 15 чисел.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''
from math import factorial
from itertools import count


def fibo_gen():
    for el in count(1):  # бесконечный цикл, который начинается с 1
        yield factorial(el)


x = 0
for i in fibo_gen():
    print('Factorial {} - {}'.format(x + 1, i))
    if x == 15:
        break
    x += 1
