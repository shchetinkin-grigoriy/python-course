##1
#В Python функция представляет собой объект и относятся к объектам первого класса,
# т.е., к элементам, которые могут быть переданы в качестве параметра, возвращены из функции, присвоены переменной.
# Если интерпретатор встречает оператор ​return​ , то забирает значение и выполняет выход из функции.Далее операторы не выполняются

##2
# Возврат набора значений - возвращающего из функции несколько объектов.
# Достаточно указать их через запятую после оператора ​ return​ .
# Пример: return​ s_side, s_full

# Смысл в том, что перечисление значений через запятую формирует объект типа кортеж (tuple). При
# присваивании кортежа сразу набору переменных - Происходит распаковка, элементы кортежа сопоставляются переменным.

##3
# Аргументы функций - при вызове могут быть позиционные и именованные, обязательные и необязательные, определенные и неопределенные
# Пример:
# # позиционные параметры
# def​ ​ first_func​ (var_1, var_2, var_3):
#   return​ var_1 + var_2 + var_3
# print(first_func(​ 10​ , ​ 20​ , ​ 30​ ))

# # именованные параметры
# def​ ​ second_func​ (var_2, var_1, var_3):
#   print(​ f"var_2 - ​ {var_2}​ ; var_1 - ​ {var_1}​ ; var_3 - ​ {var_2}​ " ​ )
# second_func(var_1=​ 10​ , var_2=​ 20​ , var_3=​ 30​ ))

#  позиционных, неопределенные число параметров. В этом случае при описании функции используется конструкция ​ *args​(кортеж) .
# Пример:
# def​ ​ my_func​ (*args):
#   return​ args
# print(my_func(​ 10​ , ​ "text_1"​ , ​ 20​ , ​ "text_2"​ ))

#  именованные, неопределенные число параметров. В этом случае при описании функции используется конструкция ​ **kwargs​(словарь) .
# Пример:
# def​ ​ my_func​ (**kwargs):
#     return​ kwargs
# print(my_func(el_1=​ 10​ , el_2=​ 20​ , el_3=​ "text"​ ))

## 4
# Анонимные функции (lambda) - содержат только одно выражение, но выполняющиеся быстрее именных функций.
# Не обязательно присваивать некоторой переменной, как в случае с именными функциями и не требуют оператора ​ return​ , в остальном — идентичны именным.

## 5
# Локальная область видимости(по умолчанию) - переменная, объявленная в рамках функции обращение к ней извне - NameError
# Глобальная область видимости - оператор global определяет глобальную область видимости для переменной, объявленной в рамках функции.
# Не локальная область видимости - перевод переменной в область видимости объемлющей функции.
# Пример:
# def​ ​ ext_func​ ():
#   my_var = ​ 0
#   def​ ​ int_func​ ():
#       nonlocal​ my_var
#       my_var += ​ 1
#       return​ my_var
#   return​ int_func