# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
my_list = [135, 200.5, complex(5, 4), True, None]
for item in my_list:
    if type(item) in (int, bool, complex, list, float):
        print(f"The {item} has a correct type")
    else:
        print(f"The {item} does't has a correct type")
# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

item_counts = int(input("Input items count: "))
items = []
i = 0
while i < item_counts:
    items.append(int(input(f'Input item {i}: ')))
    i += 1
# items = list(range(7))
print(items)
for item_index in range(len(items)):
    if item_index % 2 == 1:
        items[item_index], items[item_index - 1] = items[item_index - 1], items[item_index]
print(items)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.
# ВНИМАНИЕ - не совсем понял, что значит решение через list, поэтому сделал несколько вариантов
seasons_dict = {
    "winter": [1, 2, 12],
    "spring": [3, 4, 5],
    "summer": [6, 7, 8],
    "autumn": [9, 10, 11]
}
month_dict = {
    1: "winter", 2: "winter", 3: "spring",
    4: "spring", 5: "spring", 6: "summer",
    7: "summer", 8: "summer", 9: "autumn",
    10: "autumn", 11: "autumn", 12: "autumn"
}
seasons_list = [
    (1, "winter"), (2, "winter"), (3, "spring"),
    (4, "spring"), (5, "spring"), (6, "summer"),
    (7, "summer"), (8, "summer"), (9, "autumn"),
    (10, "autumn"), (11, "autumn"), (12, "autumn")
]
month_number = 3  # int(input("Input month: "))
if 0 < month_number < 13:
    # вариант 1
    print(month_dict[month_number])

    # вариант 2
    for month in seasons_list:
        if month[0] == month_number:
            print(month[1])
            break

    # вариант 3
    for season_name, season_months in seasons_dict.items():
        if month_number in season_months:
            print(season_name)
            break

else:
    print(f'Not exists month with number {month_number}')

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
user_text = input('Input text: ')
# user_text = 'Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.'
for user_string in enumerate(user_text.split(" ")):
    print(f'{user_string[0] + 1}: {user_string[1] if len(user_string[1]) < 10 else user_string[1][0:10]}')

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2]

item_list = [7, 5, 3, 3, 2]
rating = int(input('Input rating: '))
for item_index in range(len(item_list)):
    if rating > item_list[item_index]:
        item_list.insert(item_index, rating)
        break
print(item_list)

# 6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя. Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например список названий товаров.
product_list = [
    (1, {'название': 'компьютер', 'цена': 20000, 'количество': 5, 'eд': 'шт.'}),
    (2, {'название': 'принтер', 'цена': 6000, 'количество': 2, 'eд': 'шт.'}),
    (3, {'название': 'сканер', 'цена': 2000, 'количество': 7, 'eд': 'шт.'})
]
result_dict = {}
for product in product_list:
    for product_key, product_value in product[1].items():
        result_dict.setdefault(product_key, []).append(product_value)

print(result_dict)
